{"remainingRequest":"/Users/Jiama003/company/kfservices/node_modules/babel-loader/lib/index.js!/Users/Jiama003/company/kfservices/node_modules/eslint-loader/index.js??ref--13-0!/Users/Jiama003/company/kfservices/src/assets/js/axios.js","dependencies":[{"path":"/Users/Jiama003/company/kfservices/src/assets/js/axios.js","mtime":1559697362644},{"path":"/Users/Jiama003/company/kfservices/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Jiama003/company/kfservices/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Jiama003/company/kfservices/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport utils from \"./utils\"; // 设置全局axios默认值\n// axios.defaults.timeout = 30000; //30s的超时验证\n\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8'; //获取验签\n\nvar timeStamp = Date.parse(new Date()) / 1000;\n\nfunction getSign() {\n  var util = utils.gainPhone({\n    appKey: '7863228592',\n    timestamp: timeStamp,\n    accessToken: sessionStorage.getItem('accessToken'),\n    accountID: sessionStorage.getItem('accountID')\n  });\n  return util;\n} //添加头部\n\n\nvar headers = {\n  appKey: '7863228592',\n  timestamp: timeStamp,\n  accessToken: sessionStorage.getItem('accessToken'),\n  accountID: sessionStorage.getItem('accountID'),\n  sign: getSign() // 创建axios实例\n\n};\nvar service = axios.create({\n  headers: headers,\n  // baseURL: process.env.BASE_API, // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n  timeout: 10000\n}); // 响应拦截\n\nservice.interceptors.response.use(function (response) {\n  // dataAxios 是 axios 返回数据中的 data\n  var dataAxios = response.data; // 状态码\n\n  var ERRORCODE = dataAxios.ERRORCODE; // 根据 ERRORCODE 进行判断\n\n  if (ERRORCODE === undefined) {\n    // 如果没有 ERRORCODE 代表这不是项目后端开发的接口\n    return dataAxios;\n  } else {\n    // 有 ERRORCODE 代表这是一个后端接口 可以进行进一步的判断\n    switch (ERRORCODE) {\n      case 0:\n        // [ 示例 ] ERRORCODE === 0 代表没有错误\n        return dataAxios.RESULT;\n\n      case '0':\n        // [ 示例 ] ERRORCODE === '0' 代表没有错误\n        return dataAxios.RESULT;\n\n      case 302:\n        // 如果后台返回302，需要跳转到首页，让用户登录\n        window.location.href = dataAxios.URL; // 需要重新登录\n\n        break;\n\n      default:\n        // 不是正确的 ERRORCODE\n        if (process.env.NODE_ENV === 'development') {\n          console.log('>>>>>> Error >>>>>>');\n          console.log(dataAxios, 11111);\n        }\n\n        return Promise.reject(dataAxios);\n    }\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u4E0D\\u5B58\\u5728: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  console.log(error.message);\n  return Promise.reject(error);\n});\nexport default (function () {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'get';\n\n  if (type.toLowerCase() === 'get') {\n    return new Promise(function (resolve, reject) {\n      service.get(url, {\n        params: data\n      }).then(function (resp) {\n        resolve(resp); // console.log(resp)\n        // if (resp.data.ERRORCODE === 302) {\n        //   window.location.href = resp.data.URL\n        // } else {\n        // resolve(resp.data)\n        // }\n      }).catch(function (e) {\n        reject(e);\n      });\n    });\n  }\n\n  if (type.toLowerCase() === 'post' || type.toLowerCase() === 'put') {\n    return new Promise(function (resolve, reject) {\n      service.post(url, data).then(function (resp) {\n        resolve(resp);\n      }).catch(function (e) {\n        resolve({\n          status: 'error',\n          errCode: e.ERRORCODE,\n          msg: e.RESULT.msg\n        });\n      });\n    });\n  }\n});",{"version":3,"sources":["/Users/Jiama003/company/kfservices/src/assets/js/axios.js"],"names":["axios","utils","defaults","headers","post","timeStamp","Date","parse","getSign","util","gainPhone","appKey","timestamp","accessToken","sessionStorage","getItem","accountID","sign","service","create","timeout","interceptors","response","use","dataAxios","data","ERRORCODE","undefined","RESULT","window","location","href","URL","process","env","NODE_ENV","console","log","Promise","reject","error","status","message","config","url","type","toLowerCase","resolve","get","params","then","resp","catch","e","errCode","msg"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport utils from './utils'\n// 设置全局axios默认值\n// axios.defaults.timeout = 30000; //30s的超时验证\naxios.defaults.headers.post['Content-Type'] = 'application/json;charset=UTF-8'\n\n//获取验签\nlet  timeStamp = Date.parse (new Date ()) / 1000;\n  function getSign(){\n    let util =   utils.gainPhone({\n      appKey: '7863228592',\n      timestamp: timeStamp,\n      accessToken:sessionStorage.getItem('accessToken'),\n      accountID:sessionStorage.getItem('accountID'),\n      })\n  return util\n  }\n  //添加头部\n  let headers = {\n    appKey: '7863228592',\n    timestamp: timeStamp,\n    accessToken:sessionStorage.getItem('accessToken'),\n    accountID:sessionStorage.getItem('accountID'),\n    sign: getSign()\n  }\n// 创建axios实例\nconst service = axios.create({\n  headers:headers,\n  // baseURL: process.env.BASE_API, // `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。\n  timeout: 10000\n})\n\n// 响应拦截\nservice.interceptors.response.use(\n  response => {\n    // dataAxios 是 axios 返回数据中的 data\n    const dataAxios = response.data\n    // 状态码\n    const { ERRORCODE } = dataAxios\n    // 根据 ERRORCODE 进行判断\n    if (ERRORCODE === undefined) {\n      // 如果没有 ERRORCODE 代表这不是项目后端开发的接口\n      return dataAxios\n    } else {\n      // 有 ERRORCODE 代表这是一个后端接口 可以进行进一步的判断\n      switch (ERRORCODE) {\n        case 0:\n          // [ 示例 ] ERRORCODE === 0 代表没有错误\n          return dataAxios.RESULT\n        case '0':\n          // [ 示例 ] ERRORCODE === '0' 代表没有错误\n          return dataAxios.RESULT\n        case 302:\n          // 如果后台返回302，需要跳转到首页，让用户登录\n          window.location.href = dataAxios.URL\n          // 需要重新登录\n          break\n        default:\n          // 不是正确的 ERRORCODE\n          if (process.env.NODE_ENV === 'development') {\n            console.log('>>>>>> Error >>>>>>')\n            console.log(dataAxios, 11111)\n          }\n          return Promise.reject(dataAxios)\n      }\n    }\n  },\n  error => {\n    if (error && error.response) {\n      switch (error.response.status) {\n        case 400:\n          error.message = '请求错误'\n          break\n        case 401:\n          error.message = '未授权，请登录'\n          break\n        case 403:\n          error.message = '拒绝访问'\n          break\n        case 404:\n          error.message = `请求地址不存在: ${error.response.config.url}`\n          break\n        case 408:\n          error.message = '请求超时'\n          break\n        case 500:\n          error.message = '服务器内部错误'\n          break\n        case 501:\n          error.message = '服务未实现'\n          break\n        case 502:\n          error.message = '网关错误'\n          break\n        case 503:\n          error.message = '服务不可用'\n          break\n        case 504:\n          error.message = '网关超时'\n          break\n        case 505:\n          error.message = 'HTTP版本不受支持'\n          break\n        default:\n          break\n      }\n    }\n    console.log(error.message)\n    return Promise.reject(error)\n  }\n)\n\nexport default (url = '', data = {}, type = 'get') => {\n  if (type.toLowerCase() === 'get') {\n    return new Promise((resolve, reject) => {\n      service\n        .get(url, { params: data })\n        .then(resp => {\n          resolve(resp)\n          // console.log(resp)\n          // if (resp.data.ERRORCODE === 302) {\n          //   window.location.href = resp.data.URL\n          // } else {\n          // resolve(resp.data)\n          // }\n        })\n        .catch(e => {\n          reject(e)\n        })\n    })\n  }\n  if (type.toLowerCase() === 'post' || type.toLowerCase() === 'put') {\n    return new Promise((resolve, reject) => {\n      service\n        .post(url, data)\n        .then(resp => {\n          resolve(resp)\n        })\n        .catch(e => {\n          resolve({ status: 'error', errCode: e.ERRORCODE, msg: e.RESULT.msg })\n        })\n    })\n  }\n}"]}]}